package fr.lta.testing;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.api.Assertions;
import org.assertj.core.internal.Iterables;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link ExpectedDataLocationPath} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value="assertj-assertions-generator")
public abstract class AbstractExpectedDataLocationPathAssert<S extends AbstractExpectedDataLocationPathAssert<S, A>, A extends ExpectedDataLocationPath> extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractExpectedDataLocationPathAssert}</code> to make assertions on actual ExpectedDataLocationPath.
   * @param actual the ExpectedDataLocationPath we want to make assertions on.
   */
  protected AbstractExpectedDataLocationPathAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual ExpectedDataLocationPath's data contains the given byte elements.
   * @param data the given elements that should be contained in actual ExpectedDataLocationPath's data.
   * @return this assertion object.
   * @throws AssertionError if the actual ExpectedDataLocationPath's data does not contain all given byte elements.
   */
  public S hasData(byte... data) {
    // check that actual ExpectedDataLocationPath we want to make assertions on is not null.
    isNotNull();

    // check that given byte varargs is not null.
    if (data == null) failWithMessage("Expecting data parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.getData()).contains(data);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ExpectedDataLocationPath's data contains <b>only</b> the given byte elements and nothing else in whatever order.
   *
   * @param data the given elements that should be contained in actual ExpectedDataLocationPath's data.
   * @return this assertion object.
   * @throws AssertionError if the actual ExpectedDataLocationPath's data does not contain all given byte elements and nothing else.
   */
  public S hasOnlyData(byte... data) {
    // check that actual ExpectedDataLocationPath we want to make assertions on is not null.
    isNotNull();

    // check that given byte varargs is not null.
    if (data == null) failWithMessage("Expecting data parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.getData()).containsOnly(data);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ExpectedDataLocationPath's data does not contain the given byte elements.
   *
   * @param data the given elements that should not be in actual ExpectedDataLocationPath's data.
   * @return this assertion object.
   * @throws AssertionError if the actual ExpectedDataLocationPath's data contains any given byte elements.
   */
  public S doesNotHaveData(byte... data) {
    // check that actual ExpectedDataLocationPath we want to make assertions on is not null.
    isNotNull();

    // check that given byte varargs is not null.
    if (data == null) failWithMessage("Expecting data parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Assertions.assertThat(actual.getData()).doesNotContain(data);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ExpectedDataLocationPath has no data.
   * @return this assertion object.
   * @throws AssertionError if the actual ExpectedDataLocationPath's data is not empty.
   */
  public S hasNoData() {
    // check that actual ExpectedDataLocationPath we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have data but had :\n  <%s>";

    // check that it is not empty
    if (actual.getData().length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(actual.getData()));
    }

    // return the current assertion for method chaining
    return myself;
  }


  /**
   * Verifies that the actual ExpectedDataLocationPath's location is equal to the given one.
   * @param location the given location to compare the actual ExpectedDataLocationPath's location to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ExpectedDataLocationPath's location is not equal to the given one.
   */
  public S hasLocation(String location) {
    // check that actual ExpectedDataLocationPath we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting location of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualLocation = actual.getLocation();
    if (!Objects.areEqual(actualLocation, location)) {
      failWithMessage(assertjErrorMessage, actual, location, actualLocation);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ExpectedDataLocationPath's path contains the given java.nio.file.Path elements.
   * @param path the given elements that should be contained in actual ExpectedDataLocationPath's path.
   * @return this assertion object.
   * @throws AssertionError if the actual ExpectedDataLocationPath's path does not contain all given java.nio.file.Path elements.
   */
  public S hasPath(java.nio.file.Path... path) {
    // check that actual ExpectedDataLocationPath we want to make assertions on is not null.
    isNotNull();

    // check that given java.nio.file.Path varargs is not null.
    if (path == null) failWithMessage("Expecting path parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getPath(), path);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ExpectedDataLocationPath's path contains the given java.nio.file.Path elements in Collection.
   * @param path the given elements that should be contained in actual ExpectedDataLocationPath's path.
   * @return this assertion object.
   * @throws AssertionError if the actual ExpectedDataLocationPath's path does not contain all given java.nio.file.Path elements.
   */
  public S hasPath(java.util.Collection<? extends java.nio.file.Path> path) {
    // check that actual ExpectedDataLocationPath we want to make assertions on is not null.
    isNotNull();

    // check that given java.nio.file.Path collection is not null.
    if (path == null) {
      failWithMessage("Expecting path parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContains(info, actual.getPath(), path.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ExpectedDataLocationPath's path contains <b>only</b> the given java.nio.file.Path elements and nothing else in whatever order.
   * @param path the given elements that should be contained in actual ExpectedDataLocationPath's path.
   * @return this assertion object.
   * @throws AssertionError if the actual ExpectedDataLocationPath's path does not contain all given java.nio.file.Path elements.
   */
  public S hasOnlyPath(java.nio.file.Path... path) {
    // check that actual ExpectedDataLocationPath we want to make assertions on is not null.
    isNotNull();

    // check that given java.nio.file.Path varargs is not null.
    if (path == null) failWithMessage("Expecting path parameter not to be null.");

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getPath(), path);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ExpectedDataLocationPath's path contains <b>only</b> the given java.nio.file.Path elements in Collection and nothing else in whatever order.
   * @param path the given elements that should be contained in actual ExpectedDataLocationPath's path.
   * @return this assertion object.
   * @throws AssertionError if the actual ExpectedDataLocationPath's path does not contain all given java.nio.file.Path elements.
   */
  public S hasOnlyPath(java.util.Collection<? extends java.nio.file.Path> path) {
    // check that actual ExpectedDataLocationPath we want to make assertions on is not null.
    isNotNull();

    // check that given java.nio.file.Path collection is not null.
    if (path == null) {
      failWithMessage("Expecting path parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message, to set another message call: info.overridingErrorMessage("my error message");
    Iterables.instance().assertContainsOnly(info, actual.getPath(), path.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ExpectedDataLocationPath's path does not contain the given java.nio.file.Path elements.
   *
   * @param path the given elements that should not be in actual ExpectedDataLocationPath's path.
   * @return this assertion object.
   * @throws AssertionError if the actual ExpectedDataLocationPath's path contains any given java.nio.file.Path elements.
   */
  public S doesNotHavePath(java.nio.file.Path... path) {
    // check that actual ExpectedDataLocationPath we want to make assertions on is not null.
    isNotNull();

    // check that given java.nio.file.Path varargs is not null.
    if (path == null) failWithMessage("Expecting path parameter not to be null.");

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getPath(), path);

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ExpectedDataLocationPath's path does not contain the given java.nio.file.Path elements in Collection.
   *
   * @param path the given elements that should not be in actual ExpectedDataLocationPath's path.
   * @return this assertion object.
   * @throws AssertionError if the actual ExpectedDataLocationPath's path contains any given java.nio.file.Path elements.
   */
  public S doesNotHavePath(java.util.Collection<? extends java.nio.file.Path> path) {
    // check that actual ExpectedDataLocationPath we want to make assertions on is not null.
    isNotNull();

    // check that given java.nio.file.Path collection is not null.
    if (path == null) {
      failWithMessage("Expecting path parameter not to be null.");
      return myself; // to fool Eclipse "Null pointer access" warning on toArray.
    }

    // check with standard error message (use overridingErrorMessage before contains to set your own message).
    Iterables.instance().assertDoesNotContain(info, actual.getPath(), path.toArray());

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual ExpectedDataLocationPath has no path.
   * @return this assertion object.
   * @throws AssertionError if the actual ExpectedDataLocationPath's path is not empty.
   */
  public S hasNoPath() {
    // check that actual ExpectedDataLocationPath we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting :\n  <%s>\nnot to have path but had :\n  <%s>";

    // check
    if (actual.getPath().iterator().hasNext()) {
      failWithMessage(assertjErrorMessage, actual, actual.getPath());
    }

    // return the current assertion for method chaining
    return myself;
  }


}
